/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class AEqualCond2 extends PCond2
{
    private PCond3 _cond3_;
    private TEqual _equal_;
    private PCond2 _cond2_;

    public AEqualCond2()
    {
        // Constructor
    }

    public AEqualCond2(
        @SuppressWarnings("hiding") PCond3 _cond3_,
        @SuppressWarnings("hiding") TEqual _equal_,
        @SuppressWarnings("hiding") PCond2 _cond2_)
    {
        // Constructor
        setCond3(_cond3_);

        setEqual(_equal_);

        setCond2(_cond2_);

    }

    @Override
    public Object clone()
    {
        return new AEqualCond2(
            cloneNode(this._cond3_),
            cloneNode(this._equal_),
            cloneNode(this._cond2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEqualCond2(this);
    }

    public PCond3 getCond3()
    {
        return this._cond3_;
    }

    public void setCond3(PCond3 node)
    {
        if(this._cond3_ != null)
        {
            this._cond3_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cond3_ = node;
    }

    public TEqual getEqual()
    {
        return this._equal_;
    }

    public void setEqual(TEqual node)
    {
        if(this._equal_ != null)
        {
            this._equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equal_ = node;
    }

    public PCond2 getCond2()
    {
        return this._cond2_;
    }

    public void setCond2(PCond2 node)
    {
        if(this._cond2_ != null)
        {
            this._cond2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cond2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._cond3_)
            + toString(this._equal_)
            + toString(this._cond2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._cond3_ == child)
        {
            this._cond3_ = null;
            return;
        }

        if(this._equal_ == child)
        {
            this._equal_ = null;
            return;
        }

        if(this._cond2_ == child)
        {
            this._cond2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._cond3_ == oldChild)
        {
            setCond3((PCond3) newChild);
            return;
        }

        if(this._equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(this._cond2_ == oldChild)
        {
            setCond2((PCond2) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
