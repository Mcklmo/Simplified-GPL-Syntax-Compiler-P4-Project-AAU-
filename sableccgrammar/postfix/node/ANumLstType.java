/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class ANumLstType extends PType
{
    private TNumType _numType_;
    private TListDcl _listDcl_;

    public ANumLstType()
    {
        // Constructor
    }

    public ANumLstType(
        @SuppressWarnings("hiding") TNumType _numType_,
        @SuppressWarnings("hiding") TListDcl _listDcl_)
    {
        // Constructor
        setNumType(_numType_);

        setListDcl(_listDcl_);

    }

    @Override
    public Object clone()
    {
        return new ANumLstType(
            cloneNode(this._numType_),
            cloneNode(this._listDcl_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANumLstType(this);
    }

    public TNumType getNumType()
    {
        return this._numType_;
    }

    public void setNumType(TNumType node)
    {
        if(this._numType_ != null)
        {
            this._numType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._numType_ = node;
    }

    public TListDcl getListDcl()
    {
        return this._listDcl_;
    }

    public void setListDcl(TListDcl node)
    {
        if(this._listDcl_ != null)
        {
            this._listDcl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listDcl_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._numType_)
            + toString(this._listDcl_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._numType_ == child)
        {
            this._numType_ = null;
            return;
        }

        if(this._listDcl_ == child)
        {
            this._listDcl_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._numType_ == oldChild)
        {
            setNumType((TNumType) newChild);
            return;
        }

        if(this._listDcl_ == oldChild)
        {
            setListDcl((TListDcl) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
