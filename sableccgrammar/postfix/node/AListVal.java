/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class AListVal extends PVal
{
    private TLCurly _lCurly_;
    private PList _list_;
    private TRCurly _rCurly_;

    public AListVal()
    {
        // Constructor
    }

    public AListVal(
        @SuppressWarnings("hiding") TLCurly _lCurly_,
        @SuppressWarnings("hiding") PList _list_,
        @SuppressWarnings("hiding") TRCurly _rCurly_)
    {
        // Constructor
        setLCurly(_lCurly_);

        setList(_list_);

        setRCurly(_rCurly_);

    }

    @Override
    public Object clone()
    {
        return new AListVal(
            cloneNode(this._lCurly_),
            cloneNode(this._list_),
            cloneNode(this._rCurly_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListVal(this);
    }

    public TLCurly getLCurly()
    {
        return this._lCurly_;
    }

    public void setLCurly(TLCurly node)
    {
        if(this._lCurly_ != null)
        {
            this._lCurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lCurly_ = node;
    }

    public PList getList()
    {
        return this._list_;
    }

    public void setList(PList node)
    {
        if(this._list_ != null)
        {
            this._list_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._list_ = node;
    }

    public TRCurly getRCurly()
    {
        return this._rCurly_;
    }

    public void setRCurly(TRCurly node)
    {
        if(this._rCurly_ != null)
        {
            this._rCurly_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rCurly_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lCurly_)
            + toString(this._list_)
            + toString(this._rCurly_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lCurly_ == child)
        {
            this._lCurly_ = null;
            return;
        }

        if(this._list_ == child)
        {
            this._list_ = null;
            return;
        }

        if(this._rCurly_ == child)
        {
            this._rCurly_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lCurly_ == oldChild)
        {
            setLCurly((TLCurly) newChild);
            return;
        }

        if(this._list_ == oldChild)
        {
            setList((PList) newChild);
            return;
        }

        if(this._rCurly_ == oldChild)
        {
            setRCurly((TRCurly) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
