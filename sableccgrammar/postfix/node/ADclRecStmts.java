/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class ADclRecStmts extends PStmts
{
    private PDcl _dcl_;
    private TNewline _newline_;
    private PStmts _stmts_;

    public ADclRecStmts()
    {
        // Constructor
    }

    public ADclRecStmts(
        @SuppressWarnings("hiding") PDcl _dcl_,
        @SuppressWarnings("hiding") TNewline _newline_,
        @SuppressWarnings("hiding") PStmts _stmts_)
    {
        // Constructor
        setDcl(_dcl_);

        setNewline(_newline_);

        setStmts(_stmts_);

    }

    @Override
    public Object clone()
    {
        return new ADclRecStmts(
            cloneNode(this._dcl_),
            cloneNode(this._newline_),
            cloneNode(this._stmts_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADclRecStmts(this);
    }

    public PDcl getDcl()
    {
        return this._dcl_;
    }

    public void setDcl(PDcl node)
    {
        if(this._dcl_ != null)
        {
            this._dcl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dcl_ = node;
    }

    public TNewline getNewline()
    {
        return this._newline_;
    }

    public void setNewline(TNewline node)
    {
        if(this._newline_ != null)
        {
            this._newline_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._newline_ = node;
    }

    public PStmts getStmts()
    {
        return this._stmts_;
    }

    public void setStmts(PStmts node)
    {
        if(this._stmts_ != null)
        {
            this._stmts_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmts_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._dcl_)
            + toString(this._newline_)
            + toString(this._stmts_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._dcl_ == child)
        {
            this._dcl_ = null;
            return;
        }

        if(this._newline_ == child)
        {
            this._newline_ = null;
            return;
        }

        if(this._stmts_ == child)
        {
            this._stmts_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._dcl_ == oldChild)
        {
            setDcl((PDcl) newChild);
            return;
        }

        if(this._newline_ == oldChild)
        {
            setNewline((TNewline) newChild);
            return;
        }

        if(this._stmts_ == oldChild)
        {
            setStmts((PStmts) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
