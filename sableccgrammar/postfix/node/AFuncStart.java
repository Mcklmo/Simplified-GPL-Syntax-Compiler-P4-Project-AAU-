/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class AFuncStart extends PStart
{
    private PFunc _func_;
    private PStart _start_;

    public AFuncStart()
    {
        // Constructor
    }

    public AFuncStart(
        @SuppressWarnings("hiding") PFunc _func_,
        @SuppressWarnings("hiding") PStart _start_)
    {
        // Constructor
        setFunc(_func_);

        setStart(_start_);

    }

    @Override
    public Object clone()
    {
        return new AFuncStart(
            cloneNode(this._func_),
            cloneNode(this._start_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFuncStart(this);
    }

    public PFunc getFunc()
    {
        return this._func_;
    }

    public void setFunc(PFunc node)
    {
        if(this._func_ != null)
        {
            this._func_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._func_ = node;
    }

    public PStart getStart()
    {
        return this._start_;
    }

    public void setStart(PStart node)
    {
        if(this._start_ != null)
        {
            this._start_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._start_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._func_)
            + toString(this._start_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._func_ == child)
        {
            this._func_ = null;
            return;
        }

        if(this._start_ == child)
        {
            this._start_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._func_ == oldChild)
        {
            setFunc((PFunc) newChild);
            return;
        }

        if(this._start_ == oldChild)
        {
            setStart((PStart) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
