/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.analysis;

import postfix.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAFuncStart(AFuncStart node);
    void caseAStmtsStart(AStmtsStart node);
    void caseAStmtStart(AStmtStart node);
    void caseATypedFunc(ATypedFunc node);
    void caseAVoidFunc(AVoidFunc node);
    void caseABoolLstType(ABoolLstType node);
    void caseAStrLstType(AStrLstType node);
    void caseANumLstType(ANumLstType node);
    void caseABoolType(ABoolType node);
    void caseAStrType(AStrType node);
    void caseANumType(ANumType node);
    void caseAVoidArgs(AVoidArgs node);
    void caseANonVoidArgs(ANonVoidArgs node);
    void caseANotLastArgList(ANotLastArgList node);
    void caseALastArgList(ALastArgList node);
    void caseABeginBlock(ABeginBlock node);
    void caseAReturEndblock(AReturEndblock node);
    void caseAVoidEndblock(AVoidEndblock node);
    void caseADclRecStmts(ADclRecStmts node);
    void caseAAssignRecStmts(AAssignRecStmts node);
    void caseACntrolRecStmts(ACntrolRecStmts node);
    void caseAFuncCallRecStmts(AFuncCallRecStmts node);
    void caseADclStmts(ADclStmts node);
    void caseAAssignStmts(AAssignStmts node);
    void caseACntrolStmts(ACntrolStmts node);
    void caseAFuncCallStmts(AFuncCallStmts node);
    void caseABoolDcl(ABoolDcl node);
    void caseAStrDcl(AStrDcl node);
    void caseANumDcl(ANumDcl node);
    void caseAAssignAssignStmt(AAssignAssignStmt node);
    void caseAEqualEqualStmt(AEqualEqualStmt node);
    void caseAPlusExpr(APlusExpr node);
    void caseASubExpr(ASubExpr node);
    void caseAExpr1Expr(AExpr1Expr node);
    void caseAMultExpr1(AMultExpr1 node);
    void caseADivExpr1(ADivExpr1 node);
    void caseAModExpr1(AModExpr1 node);
    void caseAValExpr1(AValExpr1 node);
    void caseAValExpr2(AValExpr2 node);
    void caseAParanExpr2(AParanExpr2 node);
    void caseAIdVal(AIdVal node);
    void caseANumVal(ANumVal node);
    void caseAStrVal(AStrVal node);
    void caseATrueVal(ATrueVal node);
    void caseAFalseVal(AFalseVal node);
    void caseAListVal(AListVal node);
    void caseAFunVal(AFunVal node);
    void caseAIfCntrol(AIfCntrol node);
    void caseAWhileCntrol(AWhileCntrol node);
    void caseAIfIfStmt(AIfIfStmt node);
    void caseAIfElseIfStmt(AIfElseIfStmt node);
    void caseAElseIfElseStmt(AElseIfElseStmt node);
    void caseAElseElseStmt(AElseElseStmt node);
    void caseAWhileWhileStmt(AWhileWhileStmt node);
    void caseAOrCond(AOrCond node);
    void caseAAndCond(AAndCond node);
    void caseAAndCond1(AAndCond1 node);
    void caseAEqualCond1(AEqualCond1 node);
    void caseAEqualCond2(AEqualCond2 node);
    void caseANeCond2(ANeCond2 node);
    void caseARelCond2(ARelCond2 node);
    void caseALteCond3(ALteCond3 node);
    void caseAGteCond3(AGteCond3 node);
    void caseAGtCond3(AGtCond3 node);
    void caseALtCond3(ALtCond3 node);
    void caseAUnaryCond3(AUnaryCond3 node);
    void caseANotCond4(ANotCond4 node);
    void caseACond5Cond4(ACond5Cond4 node);
    void caseAParanCond5(AParanCond5 node);
    void caseAExprCond5(AExprCond5 node);
    void caseAFuncCallFuncCall(AFuncCallFuncCall node);
    void caseALastList(ALastList node);
    void caseANotLastList(ANotLastList node);

    void caseTId(TId node);
    void caseTBoolType(TBoolType node);
    void caseTStrType(TStrType node);
    void caseTNumType(TNumType node);
    void caseTListDcl(TListDcl node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLCurly(TLCurly node);
    void caseTRCurly(TRCurly node);
    void caseTReturn(TReturn node);
    void caseTNewline(TNewline node);
    void caseTAssign(TAssign node);
    void caseTNumval(TNumval node);
    void caseTStringval(TStringval node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNeg(TNeg node);
    void caseTEqual(TEqual node);
    void caseTLte(TLte node);
    void caseTGte(TGte node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTNe(TNe node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTBlank(TBlank node);
    void caseTComma(TComma node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
