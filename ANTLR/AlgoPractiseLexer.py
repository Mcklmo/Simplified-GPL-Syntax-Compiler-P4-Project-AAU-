# Generated from AlgoPractise.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,221,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,0,1,0,5,0,80,
        8,0,10,0,12,0,83,9,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,4,11,124,8,
        11,11,11,12,11,125,1,11,4,11,129,8,11,11,11,12,11,130,3,11,133,8,
        11,1,12,1,12,1,12,1,12,1,12,5,12,140,8,12,10,12,12,12,143,9,12,1,
        12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,
        15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,
        17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,
        22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,
        27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,4,32,208,8,
        32,11,32,12,32,209,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,
        1,36,0,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,0,73,0,1,0,1,2,0,65,90,97,122,228,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
        0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
        0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
        0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,1,75,1,0,0,0,3,84,1,
        0,0,0,5,89,1,0,0,0,7,96,1,0,0,0,9,100,1,0,0,0,11,103,1,0,0,0,13,
        105,1,0,0,0,15,107,1,0,0,0,17,109,1,0,0,0,19,111,1,0,0,0,21,118,
        1,0,0,0,23,132,1,0,0,0,25,134,1,0,0,0,27,146,1,0,0,0,29,151,1,0,
        0,0,31,157,1,0,0,0,33,160,1,0,0,0,35,165,1,0,0,0,37,171,1,0,0,0,
        39,175,1,0,0,0,41,178,1,0,0,0,43,180,1,0,0,0,45,183,1,0,0,0,47,186,
        1,0,0,0,49,189,1,0,0,0,51,191,1,0,0,0,53,193,1,0,0,0,55,196,1,0,
        0,0,57,198,1,0,0,0,59,200,1,0,0,0,61,202,1,0,0,0,63,204,1,0,0,0,
        65,207,1,0,0,0,67,213,1,0,0,0,69,215,1,0,0,0,71,217,1,0,0,0,73,219,
        1,0,0,0,75,81,3,73,36,0,76,80,3,73,36,0,77,80,3,71,35,0,78,80,5,
        95,0,0,79,76,1,0,0,0,79,77,1,0,0,0,79,78,1,0,0,0,80,83,1,0,0,0,81,
        79,1,0,0,0,81,82,1,0,0,0,82,2,1,0,0,0,83,81,1,0,0,0,84,85,5,98,0,
        0,85,86,5,111,0,0,86,87,5,111,0,0,87,88,5,108,0,0,88,4,1,0,0,0,89,
        90,5,115,0,0,90,91,5,116,0,0,91,92,5,114,0,0,92,93,5,105,0,0,93,
        94,5,110,0,0,94,95,5,103,0,0,95,6,1,0,0,0,96,97,5,110,0,0,97,98,
        5,117,0,0,98,99,5,109,0,0,99,8,1,0,0,0,100,101,5,91,0,0,101,102,
        5,93,0,0,102,10,1,0,0,0,103,104,5,40,0,0,104,12,1,0,0,0,105,106,
        5,41,0,0,106,14,1,0,0,0,107,108,5,123,0,0,108,16,1,0,0,0,109,110,
        5,125,0,0,110,18,1,0,0,0,111,112,5,114,0,0,112,113,5,101,0,0,113,
        114,5,116,0,0,114,115,5,117,0,0,115,116,5,114,0,0,116,117,5,110,
        0,0,117,20,1,0,0,0,118,119,5,58,0,0,119,120,5,61,0,0,120,22,1,0,
        0,0,121,123,5,45,0,0,122,124,3,71,35,0,123,122,1,0,0,0,124,125,1,
        0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,133,1,0,0,0,127,129,3,
        71,35,0,128,127,1,0,0,0,129,130,1,0,0,0,130,128,1,0,0,0,130,131,
        1,0,0,0,131,133,1,0,0,0,132,121,1,0,0,0,132,128,1,0,0,0,133,24,1,
        0,0,0,134,141,5,34,0,0,135,140,3,73,36,0,136,140,3,71,35,0,137,138,
        5,92,0,0,138,140,5,34,0,0,139,135,1,0,0,0,139,136,1,0,0,0,139,137,
        1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,144,
        1,0,0,0,143,141,1,0,0,0,144,145,5,34,0,0,145,26,1,0,0,0,146,147,
        5,116,0,0,147,148,5,114,0,0,148,149,5,117,0,0,149,150,5,101,0,0,
        150,28,1,0,0,0,151,152,5,102,0,0,152,153,5,97,0,0,153,154,5,108,
        0,0,154,155,5,115,0,0,155,156,5,101,0,0,156,30,1,0,0,0,157,158,5,
        105,0,0,158,159,5,102,0,0,159,32,1,0,0,0,160,161,5,101,0,0,161,162,
        5,108,0,0,162,163,5,115,0,0,163,164,5,101,0,0,164,34,1,0,0,0,165,
        166,5,119,0,0,166,167,5,104,0,0,167,168,5,105,0,0,168,169,5,108,
        0,0,169,170,5,101,0,0,170,36,1,0,0,0,171,172,5,97,0,0,172,173,5,
        110,0,0,173,174,5,100,0,0,174,38,1,0,0,0,175,176,5,111,0,0,176,177,
        5,114,0,0,177,40,1,0,0,0,178,179,5,33,0,0,179,42,1,0,0,0,180,181,
        5,61,0,0,181,182,5,61,0,0,182,44,1,0,0,0,183,184,5,60,0,0,184,185,
        5,61,0,0,185,46,1,0,0,0,186,187,5,62,0,0,187,188,5,61,0,0,188,48,
        1,0,0,0,189,190,5,60,0,0,190,50,1,0,0,0,191,192,5,62,0,0,192,52,
        1,0,0,0,193,194,5,33,0,0,194,195,5,61,0,0,195,54,1,0,0,0,196,197,
        5,43,0,0,197,56,1,0,0,0,198,199,5,45,0,0,199,58,1,0,0,0,200,201,
        5,42,0,0,201,60,1,0,0,0,202,203,5,47,0,0,203,62,1,0,0,0,204,205,
        5,37,0,0,205,64,1,0,0,0,206,208,5,32,0,0,207,206,1,0,0,0,208,209,
        1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,211,1,0,0,0,211,212,
        6,32,0,0,212,66,1,0,0,0,213,214,5,44,0,0,214,68,1,0,0,0,215,216,
        5,10,0,0,216,70,1,0,0,0,217,218,2,48,57,0,218,72,1,0,0,0,219,220,
        7,0,0,0,220,74,1,0,0,0,9,0,79,81,125,130,132,139,141,209,1,6,0,0
    ]

class AlgoPractiseLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ID = 1
    BOOL_TYPE = 2
    STR_TYPE = 3
    NUM_TYPE = 4
    LIST_DCL = 5
    L_PAR = 6
    R_PAR = 7
    L_CURLY = 8
    R_CURLY = 9
    RETURN = 10
    ASSIGN = 11
    NUMVAL = 12
    STRINGVAL = 13
    TRUE = 14
    FALSE = 15
    IF = 16
    ELSE = 17
    WHILE = 18
    AND = 19
    OR = 20
    NEG = 21
    EQUAL = 22
    LTE = 23
    GTE = 24
    LT = 25
    GT = 26
    NE = 27
    PLUS = 28
    MINUS = 29
    MULT = 30
    DIV = 31
    MOD = 32
    BLANK = 33
    COMMA = 34
    NEWLINE = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'bool'", "'string'", "'num'", "'[]'", "'('", "')'", "'{'", 
            "'}'", "'return'", "':='", "'true'", "'false'", "'if'", "'else'", 
            "'while'", "'and'", "'or'", "'!'", "'=='", "'<='", "'>='", "'<'", 
            "'>'", "'!='", "'+'", "'-'", "'*'", "'/'", "'%'", "','", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "BOOL_TYPE", "STR_TYPE", "NUM_TYPE", "LIST_DCL", "L_PAR", 
            "R_PAR", "L_CURLY", "R_CURLY", "RETURN", "ASSIGN", "NUMVAL", 
            "STRINGVAL", "TRUE", "FALSE", "IF", "ELSE", "WHILE", "AND", 
            "OR", "NEG", "EQUAL", "LTE", "GTE", "LT", "GT", "NE", "PLUS", 
            "MINUS", "MULT", "DIV", "MOD", "BLANK", "COMMA", "NEWLINE" ]

    ruleNames = [ "ID", "BOOL_TYPE", "STR_TYPE", "NUM_TYPE", "LIST_DCL", 
                  "L_PAR", "R_PAR", "L_CURLY", "R_CURLY", "RETURN", "ASSIGN", 
                  "NUMVAL", "STRINGVAL", "TRUE", "FALSE", "IF", "ELSE", 
                  "WHILE", "AND", "OR", "NEG", "EQUAL", "LTE", "GTE", "LT", 
                  "GT", "NE", "PLUS", "MINUS", "MULT", "DIV", "MOD", "BLANK", 
                  "COMMA", "NEWLINE", "DIGIT", "LETTER" ]

    grammarFileName = "AlgoPractise.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


