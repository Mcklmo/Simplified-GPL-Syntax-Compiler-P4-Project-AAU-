# Generated from AlgoPractise.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,208,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
        4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,
        8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,5,10,124,8,10,10,10,12,
        10,127,9,10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,
        15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,4,
        18,152,8,18,11,18,12,18,153,1,18,4,18,157,8,18,11,18,12,18,158,3,
        18,161,8,18,1,19,1,19,1,19,1,19,1,19,5,19,168,8,19,10,19,12,19,171,
        9,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,
        1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,
        1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,0,0,35,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,0,69,0,1,0,
        2,1,0,48,57,2,0,65,90,97,122,214,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,1,71,1,0,0,0,3,76,1,0,0,0,5,83,1,0,0,0,7,87,1,0,0,0,9,92,1,0,0,
        0,11,98,1,0,0,0,13,101,1,0,0,0,15,106,1,0,0,0,17,112,1,0,0,0,19,
        116,1,0,0,0,21,119,1,0,0,0,23,128,1,0,0,0,25,131,1,0,0,0,27,133,
        1,0,0,0,29,135,1,0,0,0,31,137,1,0,0,0,33,139,1,0,0,0,35,146,1,0,
        0,0,37,160,1,0,0,0,39,162,1,0,0,0,41,174,1,0,0,0,43,176,1,0,0,0,
        45,179,1,0,0,0,47,182,1,0,0,0,49,185,1,0,0,0,51,187,1,0,0,0,53,189,
        1,0,0,0,55,192,1,0,0,0,57,194,1,0,0,0,59,196,1,0,0,0,61,198,1,0,
        0,0,63,200,1,0,0,0,65,202,1,0,0,0,67,204,1,0,0,0,69,206,1,0,0,0,
        71,72,5,98,0,0,72,73,5,111,0,0,73,74,5,111,0,0,74,75,5,108,0,0,75,
        2,1,0,0,0,76,77,5,115,0,0,77,78,5,116,0,0,78,79,5,114,0,0,79,80,
        5,105,0,0,80,81,5,110,0,0,81,82,5,103,0,0,82,4,1,0,0,0,83,84,5,110,
        0,0,84,85,5,117,0,0,85,86,5,109,0,0,86,6,1,0,0,0,87,88,5,116,0,0,
        88,89,5,114,0,0,89,90,5,117,0,0,90,91,5,101,0,0,91,8,1,0,0,0,92,
        93,5,102,0,0,93,94,5,97,0,0,94,95,5,108,0,0,95,96,5,115,0,0,96,97,
        5,101,0,0,97,10,1,0,0,0,98,99,5,105,0,0,99,100,5,102,0,0,100,12,
        1,0,0,0,101,102,5,101,0,0,102,103,5,108,0,0,103,104,5,115,0,0,104,
        105,5,101,0,0,105,14,1,0,0,0,106,107,5,119,0,0,107,108,5,104,0,0,
        108,109,5,105,0,0,109,110,5,108,0,0,110,111,5,101,0,0,111,16,1,0,
        0,0,112,113,5,97,0,0,113,114,5,110,0,0,114,115,5,100,0,0,115,18,
        1,0,0,0,116,117,5,111,0,0,117,118,5,114,0,0,118,20,1,0,0,0,119,125,
        3,69,34,0,120,124,3,69,34,0,121,124,3,67,33,0,122,124,5,95,0,0,123,
        120,1,0,0,0,123,121,1,0,0,0,123,122,1,0,0,0,124,127,1,0,0,0,125,
        123,1,0,0,0,125,126,1,0,0,0,126,22,1,0,0,0,127,125,1,0,0,0,128,129,
        5,91,0,0,129,130,5,93,0,0,130,24,1,0,0,0,131,132,5,40,0,0,132,26,
        1,0,0,0,133,134,5,41,0,0,134,28,1,0,0,0,135,136,5,123,0,0,136,30,
        1,0,0,0,137,138,5,125,0,0,138,32,1,0,0,0,139,140,5,114,0,0,140,141,
        5,101,0,0,141,142,5,116,0,0,142,143,5,117,0,0,143,144,5,114,0,0,
        144,145,5,110,0,0,145,34,1,0,0,0,146,147,5,58,0,0,147,148,5,61,0,
        0,148,36,1,0,0,0,149,151,5,45,0,0,150,152,3,67,33,0,151,150,1,0,
        0,0,152,153,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,161,1,0,
        0,0,155,157,3,67,33,0,156,155,1,0,0,0,157,158,1,0,0,0,158,156,1,
        0,0,0,158,159,1,0,0,0,159,161,1,0,0,0,160,149,1,0,0,0,160,156,1,
        0,0,0,161,38,1,0,0,0,162,169,5,34,0,0,163,168,3,69,34,0,164,168,
        3,67,33,0,165,166,5,92,0,0,166,168,5,34,0,0,167,163,1,0,0,0,167,
        164,1,0,0,0,167,165,1,0,0,0,168,171,1,0,0,0,169,167,1,0,0,0,169,
        170,1,0,0,0,170,172,1,0,0,0,171,169,1,0,0,0,172,173,5,34,0,0,173,
        40,1,0,0,0,174,175,5,33,0,0,175,42,1,0,0,0,176,177,5,61,0,0,177,
        178,5,61,0,0,178,44,1,0,0,0,179,180,5,60,0,0,180,181,5,61,0,0,181,
        46,1,0,0,0,182,183,5,62,0,0,183,184,5,61,0,0,184,48,1,0,0,0,185,
        186,5,60,0,0,186,50,1,0,0,0,187,188,5,62,0,0,188,52,1,0,0,0,189,
        190,5,33,0,0,190,191,5,61,0,0,191,54,1,0,0,0,192,193,5,43,0,0,193,
        56,1,0,0,0,194,195,5,45,0,0,195,58,1,0,0,0,196,197,5,42,0,0,197,
        60,1,0,0,0,198,199,5,47,0,0,199,62,1,0,0,0,200,201,5,37,0,0,201,
        64,1,0,0,0,202,203,5,44,0,0,203,66,1,0,0,0,204,205,7,0,0,0,205,68,
        1,0,0,0,206,207,7,1,0,0,207,70,1,0,0,0,8,0,123,125,153,158,160,167,
        169,0
    ]

class AlgoPractiseLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    BOOL_TYPE = 1
    STR_TYPE = 2
    NUM_TYPE = 3
    TRUE = 4
    FALSE = 5
    IF = 6
    ELSE = 7
    WHILE = 8
    AND = 9
    OR = 10
    ID = 11
    LIST_DCL = 12
    L_PAR = 13
    R_PAR = 14
    L_CURLY = 15
    R_CURLY = 16
    RETURN = 17
    ASSIGN = 18
    NUMVAL = 19
    STRINGVAL = 20
    NEG = 21
    EQUAL = 22
    LTE = 23
    GTE = 24
    LT = 25
    GT = 26
    NE = 27
    PLUS = 28
    MINUS = 29
    MULT = 30
    DIV = 31
    MOD = 32
    COMMA = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'bool'", "'string'", "'num'", "'true'", "'false'", "'if'", 
            "'else'", "'while'", "'and'", "'or'", "'[]'", "'('", "')'", 
            "'{'", "'}'", "'return'", "':='", "'!'", "'=='", "'<='", "'>='", 
            "'<'", "'>'", "'!='", "'+'", "'-'", "'*'", "'/'", "'%'", "','" ]

    symbolicNames = [ "<INVALID>",
            "BOOL_TYPE", "STR_TYPE", "NUM_TYPE", "TRUE", "FALSE", "IF", 
            "ELSE", "WHILE", "AND", "OR", "ID", "LIST_DCL", "L_PAR", "R_PAR", 
            "L_CURLY", "R_CURLY", "RETURN", "ASSIGN", "NUMVAL", "STRINGVAL", 
            "NEG", "EQUAL", "LTE", "GTE", "LT", "GT", "NE", "PLUS", "MINUS", 
            "MULT", "DIV", "MOD", "COMMA" ]

    ruleNames = [ "BOOL_TYPE", "STR_TYPE", "NUM_TYPE", "TRUE", "FALSE", 
                  "IF", "ELSE", "WHILE", "AND", "OR", "ID", "LIST_DCL", 
                  "L_PAR", "R_PAR", "L_CURLY", "R_CURLY", "RETURN", "ASSIGN", 
                  "NUMVAL", "STRINGVAL", "NEG", "EQUAL", "LTE", "GTE", "LT", 
                  "GT", "NE", "PLUS", "MINUS", "MULT", "DIV", "MOD", "COMMA", 
                  "DIGIT", "LETTER" ]

    grammarFileName = "AlgoPractise.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


