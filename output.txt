(start (stmts (stmt (cntrol (while_stmt while (expr (expr (val 1)) > (expr (val 2))) (block { })))) \n \n (stmt (dcl (type bool) idxyz)) \n (stmt (dcl (type bool) (assign_stmt idxzy := (expr (val 0))))) \n \n (stmt (func_call funcxyz ( (elmnt_list (expr (expr (val a)) + (expr (val 3))) , (expr (val (func_call a ( elmnt_list ))))) ))) \n) (func (type num) (func_decl funcname (params ( (param_lst (param (type num) a) , (param (type bool) y) , (param (type string) h)) )) (block { \n \n (stmts (stmt return (expr (val 7))) \n) }))) \n (stmts (stmt (dcl (type num [ ] [ ] [ ]) (assign_stmt a := (expr (val { (elmnt_list (expr (val { (elmnt_list (expr (val { (elmnt_list (expr (val 1)) , (expr (val 2))) })) , (expr (val { (elmnt_list (expr (val 3)) , (expr (val 4))) }))) })) , (expr (val { (elmnt_list (expr (val { (elmnt_list (expr (val 5)) , (expr (val 6))) }))) }))) }))))) \n (stmt (assign_stmt a := (expr (val a [ (val 0) ])))) \n (stmt (assign_stmt a := (expr (val a [ (val 0) ] [ (val 0) ] [ (val 0) ] [ (val 0) ] [ (val 0) ] [ (val 0) ] [ (val 0) ] [ (val 0) ] [ (val 0) ] [ (val 0) ] [ (val 0) ] [ (val 0) ])))) \n (stmt (cntrol (while_stmt while (expr (expr (val a)) > (expr (val b))) (block { \n (stmts (stmt (func_call print ( (elmnt_list (expr (val a))) ))) \n) })))) \n (stmt return) \n (stmt (dcl (type num) (assign_stmt a := (expr (val 1))))) \n (stmt (dcl (type num) (assign_stmt aa := (expr (val 1))))) \n (stmt (dcl (type num) (assign_stmt a1 := (expr (val 1))))) \n (stmt (dcl (type num) (assign_stmt _a1 := (expr (val 1))))) \n (stmt (assign_stmt a := (expr (val "\"")))) \n (stmt (assign_stmt a := (expr (val "liasdhfiluahfiuasdifhasdlifhia")))) \n (stmt (assign_stmt a := (expr (val "\n")))) \n (stmt return (expr (val 0))) \n (stmt (dcl (type num) (assign_stmt ________lisdahf98764876aosdifhalidsfh8762467______a1 := (expr (val 1))))) \n) (func (type num) (func_decl iasdhf (params ( )) (block { \n \n }))) <EOF>)