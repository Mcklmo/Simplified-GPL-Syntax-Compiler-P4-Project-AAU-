# Generated from AlgoPractise.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,241,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,
        1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,
        1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
        1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,3,
        10,128,8,10,1,10,1,10,1,10,5,10,133,8,10,10,10,12,10,136,9,10,1,
        11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,3,18,160,8,18,1,18,4,
        18,163,8,18,11,18,12,18,164,1,19,1,19,1,19,5,19,170,8,19,10,19,12,
        19,173,9,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,
        20,185,8,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,
        24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,
        30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,4,34,218,8,34,11,34,12,34,
        219,1,34,1,34,1,35,1,35,1,35,1,35,5,35,228,8,35,10,35,12,35,231,
        9,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,37,1,37,2,171,229,0,38,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,0,75,0,1,0,4,3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,
        1,0,48,57,2,0,65,90,97,122,251,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
        0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,77,1,0,0,0,3,82,1,0,0,0,
        5,89,1,0,0,0,7,93,1,0,0,0,9,98,1,0,0,0,11,104,1,0,0,0,13,107,1,0,
        0,0,15,112,1,0,0,0,17,118,1,0,0,0,19,122,1,0,0,0,21,127,1,0,0,0,
        23,137,1,0,0,0,25,140,1,0,0,0,27,142,1,0,0,0,29,144,1,0,0,0,31,146,
        1,0,0,0,33,148,1,0,0,0,35,155,1,0,0,0,37,159,1,0,0,0,39,166,1,0,
        0,0,41,184,1,0,0,0,43,186,1,0,0,0,45,188,1,0,0,0,47,191,1,0,0,0,
        49,194,1,0,0,0,51,197,1,0,0,0,53,199,1,0,0,0,55,201,1,0,0,0,57,204,
        1,0,0,0,59,206,1,0,0,0,61,208,1,0,0,0,63,210,1,0,0,0,65,212,1,0,
        0,0,67,214,1,0,0,0,69,217,1,0,0,0,71,223,1,0,0,0,73,237,1,0,0,0,
        75,239,1,0,0,0,77,78,5,98,0,0,78,79,5,111,0,0,79,80,5,111,0,0,80,
        81,5,108,0,0,81,2,1,0,0,0,82,83,5,115,0,0,83,84,5,116,0,0,84,85,
        5,114,0,0,85,86,5,105,0,0,86,87,5,110,0,0,87,88,5,103,0,0,88,4,1,
        0,0,0,89,90,5,110,0,0,90,91,5,117,0,0,91,92,5,109,0,0,92,6,1,0,0,
        0,93,94,5,116,0,0,94,95,5,114,0,0,95,96,5,117,0,0,96,97,5,101,0,
        0,97,8,1,0,0,0,98,99,5,102,0,0,99,100,5,97,0,0,100,101,5,108,0,0,
        101,102,5,115,0,0,102,103,5,101,0,0,103,10,1,0,0,0,104,105,5,105,
        0,0,105,106,5,102,0,0,106,12,1,0,0,0,107,108,5,101,0,0,108,109,5,
        108,0,0,109,110,5,115,0,0,110,111,5,101,0,0,111,14,1,0,0,0,112,113,
        5,119,0,0,113,114,5,104,0,0,114,115,5,105,0,0,115,116,5,108,0,0,
        116,117,5,101,0,0,117,16,1,0,0,0,118,119,5,97,0,0,119,120,5,110,
        0,0,120,121,5,100,0,0,121,18,1,0,0,0,122,123,5,111,0,0,123,124,5,
        114,0,0,124,20,1,0,0,0,125,128,3,75,37,0,126,128,5,95,0,0,127,125,
        1,0,0,0,127,126,1,0,0,0,128,134,1,0,0,0,129,133,3,75,37,0,130,133,
        3,73,36,0,131,133,5,95,0,0,132,129,1,0,0,0,132,130,1,0,0,0,132,131,
        1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,22,1,
        0,0,0,136,134,1,0,0,0,137,138,5,91,0,0,138,139,5,93,0,0,139,24,1,
        0,0,0,140,141,5,40,0,0,141,26,1,0,0,0,142,143,5,41,0,0,143,28,1,
        0,0,0,144,145,5,123,0,0,145,30,1,0,0,0,146,147,5,125,0,0,147,32,
        1,0,0,0,148,149,5,114,0,0,149,150,5,101,0,0,150,151,5,116,0,0,151,
        152,5,117,0,0,152,153,5,114,0,0,153,154,5,110,0,0,154,34,1,0,0,0,
        155,156,5,58,0,0,156,157,5,61,0,0,157,36,1,0,0,0,158,160,5,45,0,
        0,159,158,1,0,0,0,159,160,1,0,0,0,160,162,1,0,0,0,161,163,3,73,36,
        0,162,161,1,0,0,0,163,164,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,
        0,165,38,1,0,0,0,166,171,5,34,0,0,167,170,3,41,20,0,168,170,8,0,
        0,0,169,167,1,0,0,0,169,168,1,0,0,0,170,173,1,0,0,0,171,172,1,0,
        0,0,171,169,1,0,0,0,172,174,1,0,0,0,173,171,1,0,0,0,174,175,5,34,
        0,0,175,40,1,0,0,0,176,177,5,92,0,0,177,185,5,34,0,0,178,179,5,92,
        0,0,179,185,5,92,0,0,180,181,5,92,0,0,181,185,5,110,0,0,182,183,
        5,92,0,0,183,185,5,114,0,0,184,176,1,0,0,0,184,178,1,0,0,0,184,180,
        1,0,0,0,184,182,1,0,0,0,185,42,1,0,0,0,186,187,5,33,0,0,187,44,1,
        0,0,0,188,189,5,61,0,0,189,190,5,61,0,0,190,46,1,0,0,0,191,192,5,
        60,0,0,192,193,5,61,0,0,193,48,1,0,0,0,194,195,5,62,0,0,195,196,
        5,61,0,0,196,50,1,0,0,0,197,198,5,60,0,0,198,52,1,0,0,0,199,200,
        5,62,0,0,200,54,1,0,0,0,201,202,5,33,0,0,202,203,5,61,0,0,203,56,
        1,0,0,0,204,205,5,43,0,0,205,58,1,0,0,0,206,207,5,45,0,0,207,60,
        1,0,0,0,208,209,5,42,0,0,209,62,1,0,0,0,210,211,5,47,0,0,211,64,
        1,0,0,0,212,213,5,37,0,0,213,66,1,0,0,0,214,215,5,44,0,0,215,68,
        1,0,0,0,216,218,7,1,0,0,217,216,1,0,0,0,218,219,1,0,0,0,219,217,
        1,0,0,0,219,220,1,0,0,0,220,221,1,0,0,0,221,222,6,34,0,0,222,70,
        1,0,0,0,223,224,5,47,0,0,224,225,5,42,0,0,225,229,1,0,0,0,226,228,
        9,0,0,0,227,226,1,0,0,0,228,231,1,0,0,0,229,230,1,0,0,0,229,227,
        1,0,0,0,230,232,1,0,0,0,231,229,1,0,0,0,232,233,5,42,0,0,233,234,
        5,47,0,0,234,235,1,0,0,0,235,236,6,35,0,0,236,72,1,0,0,0,237,238,
        7,2,0,0,238,74,1,0,0,0,239,240,7,3,0,0,240,76,1,0,0,0,11,0,127,132,
        134,159,164,169,171,184,219,229,1,6,0,0
    ]

class AlgoPractiseLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    BOOL_TYPE = 1
    STR_TYPE = 2
    NUM_TYPE = 3
    TRUE = 4
    FALSE = 5
    IF = 6
    ELSE = 7
    WHILE = 8
    AND = 9
    OR = 10
    ID = 11
    LIST_DCL = 12
    L_PAR = 13
    R_PAR = 14
    L_CURLY = 15
    R_CURLY = 16
    RETURN = 17
    ASSIGN = 18
    NUMVAL = 19
    STRINGVAL = 20
    ESC = 21
    NEG = 22
    EQUAL = 23
    LTE = 24
    GTE = 25
    LT = 26
    GT = 27
    NE = 28
    PLUS = 29
    MINUS = 30
    MULT = 31
    DIV = 32
    MOD = 33
    COMMA = 34
    WS = 35
    COMMENT = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'bool'", "'string'", "'num'", "'true'", "'false'", "'if'", 
            "'else'", "'while'", "'and'", "'or'", "'[]'", "'('", "')'", 
            "'{'", "'}'", "'return'", "':='", "'!'", "'=='", "'<='", "'>='", 
            "'<'", "'>'", "'!='", "'+'", "'-'", "'*'", "'/'", "'%'", "','" ]

    symbolicNames = [ "<INVALID>",
            "BOOL_TYPE", "STR_TYPE", "NUM_TYPE", "TRUE", "FALSE", "IF", 
            "ELSE", "WHILE", "AND", "OR", "ID", "LIST_DCL", "L_PAR", "R_PAR", 
            "L_CURLY", "R_CURLY", "RETURN", "ASSIGN", "NUMVAL", "STRINGVAL", 
            "ESC", "NEG", "EQUAL", "LTE", "GTE", "LT", "GT", "NE", "PLUS", 
            "MINUS", "MULT", "DIV", "MOD", "COMMA", "WS", "COMMENT" ]

    ruleNames = [ "BOOL_TYPE", "STR_TYPE", "NUM_TYPE", "TRUE", "FALSE", 
                  "IF", "ELSE", "WHILE", "AND", "OR", "ID", "LIST_DCL", 
                  "L_PAR", "R_PAR", "L_CURLY", "R_CURLY", "RETURN", "ASSIGN", 
                  "NUMVAL", "STRINGVAL", "ESC", "NEG", "EQUAL", "LTE", "GTE", 
                  "LT", "GT", "NE", "PLUS", "MINUS", "MULT", "DIV", "MOD", 
                  "COMMA", "WS", "COMMENT", "DIGIT", "LETTER" ]

    grammarFileName = "AlgoPractise.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


