# Generated from AlgoPractise.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,236,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,0,1,0,1,0,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,
        7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,3,10,126,8,10,
        1,10,1,10,1,10,5,10,131,8,10,10,10,12,10,134,9,10,1,11,1,11,1,11,
        1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,17,1,17,1,17,1,18,1,18,4,18,159,8,18,11,18,12,18,160,
        1,18,4,18,164,8,18,11,18,12,18,165,3,18,168,8,18,1,19,1,19,1,19,
        1,19,1,19,5,19,175,8,19,10,19,12,19,178,9,19,1,19,1,19,1,20,1,20,
        1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,
        1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,
        1,32,1,32,1,33,4,33,213,8,33,11,33,12,33,214,1,33,1,33,1,34,1,34,
        1,34,1,34,5,34,223,8,34,10,34,12,34,226,9,34,1,34,1,34,1,34,1,34,
        1,34,1,35,1,35,1,36,1,36,1,224,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,0,73,0,1,0,3,3,0,9,10,13,
        13,32,32,1,0,48,57,2,0,65,90,97,122,245,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,1,75,1,0,0,0,3,80,1,0,0,0,5,
        87,1,0,0,0,7,91,1,0,0,0,9,96,1,0,0,0,11,102,1,0,0,0,13,105,1,0,0,
        0,15,110,1,0,0,0,17,116,1,0,0,0,19,120,1,0,0,0,21,125,1,0,0,0,23,
        135,1,0,0,0,25,138,1,0,0,0,27,140,1,0,0,0,29,142,1,0,0,0,31,144,
        1,0,0,0,33,146,1,0,0,0,35,153,1,0,0,0,37,167,1,0,0,0,39,169,1,0,
        0,0,41,181,1,0,0,0,43,183,1,0,0,0,45,186,1,0,0,0,47,189,1,0,0,0,
        49,192,1,0,0,0,51,194,1,0,0,0,53,196,1,0,0,0,55,199,1,0,0,0,57,201,
        1,0,0,0,59,203,1,0,0,0,61,205,1,0,0,0,63,207,1,0,0,0,65,209,1,0,
        0,0,67,212,1,0,0,0,69,218,1,0,0,0,71,232,1,0,0,0,73,234,1,0,0,0,
        75,76,5,98,0,0,76,77,5,111,0,0,77,78,5,111,0,0,78,79,5,108,0,0,79,
        2,1,0,0,0,80,81,5,115,0,0,81,82,5,116,0,0,82,83,5,114,0,0,83,84,
        5,105,0,0,84,85,5,110,0,0,85,86,5,103,0,0,86,4,1,0,0,0,87,88,5,110,
        0,0,88,89,5,117,0,0,89,90,5,109,0,0,90,6,1,0,0,0,91,92,5,116,0,0,
        92,93,5,114,0,0,93,94,5,117,0,0,94,95,5,101,0,0,95,8,1,0,0,0,96,
        97,5,102,0,0,97,98,5,97,0,0,98,99,5,108,0,0,99,100,5,115,0,0,100,
        101,5,101,0,0,101,10,1,0,0,0,102,103,5,105,0,0,103,104,5,102,0,0,
        104,12,1,0,0,0,105,106,5,101,0,0,106,107,5,108,0,0,107,108,5,115,
        0,0,108,109,5,101,0,0,109,14,1,0,0,0,110,111,5,119,0,0,111,112,5,
        104,0,0,112,113,5,105,0,0,113,114,5,108,0,0,114,115,5,101,0,0,115,
        16,1,0,0,0,116,117,5,97,0,0,117,118,5,110,0,0,118,119,5,100,0,0,
        119,18,1,0,0,0,120,121,5,111,0,0,121,122,5,114,0,0,122,20,1,0,0,
        0,123,126,3,73,36,0,124,126,5,95,0,0,125,123,1,0,0,0,125,124,1,0,
        0,0,126,132,1,0,0,0,127,131,3,73,36,0,128,131,3,71,35,0,129,131,
        5,95,0,0,130,127,1,0,0,0,130,128,1,0,0,0,130,129,1,0,0,0,131,134,
        1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,22,1,0,0,0,134,132,1,
        0,0,0,135,136,5,91,0,0,136,137,5,93,0,0,137,24,1,0,0,0,138,139,5,
        40,0,0,139,26,1,0,0,0,140,141,5,41,0,0,141,28,1,0,0,0,142,143,5,
        123,0,0,143,30,1,0,0,0,144,145,5,125,0,0,145,32,1,0,0,0,146,147,
        5,114,0,0,147,148,5,101,0,0,148,149,5,116,0,0,149,150,5,117,0,0,
        150,151,5,114,0,0,151,152,5,110,0,0,152,34,1,0,0,0,153,154,5,58,
        0,0,154,155,5,61,0,0,155,36,1,0,0,0,156,158,5,45,0,0,157,159,3,71,
        35,0,158,157,1,0,0,0,159,160,1,0,0,0,160,158,1,0,0,0,160,161,1,0,
        0,0,161,168,1,0,0,0,162,164,3,71,35,0,163,162,1,0,0,0,164,165,1,
        0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,168,1,0,0,0,167,156,1,
        0,0,0,167,163,1,0,0,0,168,38,1,0,0,0,169,176,5,34,0,0,170,175,3,
        73,36,0,171,175,3,71,35,0,172,173,5,92,0,0,173,175,5,34,0,0,174,
        170,1,0,0,0,174,171,1,0,0,0,174,172,1,0,0,0,175,178,1,0,0,0,176,
        174,1,0,0,0,176,177,1,0,0,0,177,179,1,0,0,0,178,176,1,0,0,0,179,
        180,5,34,0,0,180,40,1,0,0,0,181,182,5,33,0,0,182,42,1,0,0,0,183,
        184,5,61,0,0,184,185,5,61,0,0,185,44,1,0,0,0,186,187,5,60,0,0,187,
        188,5,61,0,0,188,46,1,0,0,0,189,190,5,62,0,0,190,191,5,61,0,0,191,
        48,1,0,0,0,192,193,5,60,0,0,193,50,1,0,0,0,194,195,5,62,0,0,195,
        52,1,0,0,0,196,197,5,33,0,0,197,198,5,61,0,0,198,54,1,0,0,0,199,
        200,5,43,0,0,200,56,1,0,0,0,201,202,5,45,0,0,202,58,1,0,0,0,203,
        204,5,42,0,0,204,60,1,0,0,0,205,206,5,47,0,0,206,62,1,0,0,0,207,
        208,5,37,0,0,208,64,1,0,0,0,209,210,5,44,0,0,210,66,1,0,0,0,211,
        213,7,0,0,0,212,211,1,0,0,0,213,214,1,0,0,0,214,212,1,0,0,0,214,
        215,1,0,0,0,215,216,1,0,0,0,216,217,6,33,0,0,217,68,1,0,0,0,218,
        219,5,47,0,0,219,220,5,42,0,0,220,224,1,0,0,0,221,223,9,0,0,0,222,
        221,1,0,0,0,223,226,1,0,0,0,224,225,1,0,0,0,224,222,1,0,0,0,225,
        227,1,0,0,0,226,224,1,0,0,0,227,228,5,42,0,0,228,229,5,47,0,0,229,
        230,1,0,0,0,230,231,6,34,0,0,231,70,1,0,0,0,232,233,7,1,0,0,233,
        72,1,0,0,0,234,235,7,2,0,0,235,74,1,0,0,0,11,0,125,130,132,160,165,
        167,174,176,214,224,1,6,0,0
    ]

class AlgoPractiseLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    BOOL_TYPE = 1
    STR_TYPE = 2
    NUM_TYPE = 3
    TRUE = 4
    FALSE = 5
    IF = 6
    ELSE = 7
    WHILE = 8
    AND = 9
    OR = 10
    ID = 11
    LIST_DCL = 12
    L_PAR = 13
    R_PAR = 14
    L_CURLY = 15
    R_CURLY = 16
    RETURN = 17
    ASSIGN = 18
    NUMVAL = 19
    STRINGVAL = 20
    NEG = 21
    EQUAL = 22
    LTE = 23
    GTE = 24
    LT = 25
    GT = 26
    NE = 27
    PLUS = 28
    MINUS = 29
    MULT = 30
    DIV = 31
    MOD = 32
    COMMA = 33
    WS = 34
    COMMENT = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'bool'", "'string'", "'num'", "'true'", "'false'", "'if'", 
            "'else'", "'while'", "'and'", "'or'", "'[]'", "'('", "')'", 
            "'{'", "'}'", "'return'", "':='", "'!'", "'=='", "'<='", "'>='", 
            "'<'", "'>'", "'!='", "'+'", "'-'", "'*'", "'/'", "'%'", "','" ]

    symbolicNames = [ "<INVALID>",
            "BOOL_TYPE", "STR_TYPE", "NUM_TYPE", "TRUE", "FALSE", "IF", 
            "ELSE", "WHILE", "AND", "OR", "ID", "LIST_DCL", "L_PAR", "R_PAR", 
            "L_CURLY", "R_CURLY", "RETURN", "ASSIGN", "NUMVAL", "STRINGVAL", 
            "NEG", "EQUAL", "LTE", "GTE", "LT", "GT", "NE", "PLUS", "MINUS", 
            "MULT", "DIV", "MOD", "COMMA", "WS", "COMMENT" ]

    ruleNames = [ "BOOL_TYPE", "STR_TYPE", "NUM_TYPE", "TRUE", "FALSE", 
                  "IF", "ELSE", "WHILE", "AND", "OR", "ID", "LIST_DCL", 
                  "L_PAR", "R_PAR", "L_CURLY", "R_CURLY", "RETURN", "ASSIGN", 
                  "NUMVAL", "STRINGVAL", "NEG", "EQUAL", "LTE", "GTE", "LT", 
                  "GT", "NE", "PLUS", "MINUS", "MULT", "DIV", "MOD", "COMMA", 
                  "WS", "COMMENT", "DIGIT", "LETTER" ]

    grammarFileName = "AlgoPractise.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


