# Generated from AlgoPractise.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,249,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
        1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
        1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,3,12,136,8,12,1,12,1,12,
        1,12,5,12,141,8,12,10,12,12,12,144,9,12,1,13,1,13,1,13,1,14,1,14,
        1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,19,1,19,1,19,1,20,3,20,168,8,20,1,20,4,20,171,8,20,11,20,12,20,
        172,1,21,1,21,1,21,5,21,178,8,21,10,21,12,21,181,9,21,1,21,1,21,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,193,8,22,1,23,1,23,
        1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,
        1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,
        1,35,1,35,1,36,4,36,226,8,36,11,36,12,36,227,1,36,1,36,1,37,1,37,
        1,37,1,37,5,37,236,8,37,10,37,12,37,239,9,37,1,37,1,37,1,37,1,37,
        1,37,1,38,1,38,1,39,1,39,2,179,237,0,40,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
        29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,0,79,
        0,1,0,4,3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,1,0,48,57,2,0,
        65,90,97,122,259,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,81,1,0,0,0,
        3,83,1,0,0,0,5,85,1,0,0,0,7,90,1,0,0,0,9,97,1,0,0,0,11,101,1,0,0,
        0,13,106,1,0,0,0,15,112,1,0,0,0,17,115,1,0,0,0,19,120,1,0,0,0,21,
        126,1,0,0,0,23,130,1,0,0,0,25,135,1,0,0,0,27,145,1,0,0,0,29,148,
        1,0,0,0,31,150,1,0,0,0,33,152,1,0,0,0,35,154,1,0,0,0,37,156,1,0,
        0,0,39,163,1,0,0,0,41,167,1,0,0,0,43,174,1,0,0,0,45,192,1,0,0,0,
        47,194,1,0,0,0,49,196,1,0,0,0,51,199,1,0,0,0,53,202,1,0,0,0,55,205,
        1,0,0,0,57,207,1,0,0,0,59,209,1,0,0,0,61,212,1,0,0,0,63,214,1,0,
        0,0,65,216,1,0,0,0,67,218,1,0,0,0,69,220,1,0,0,0,71,222,1,0,0,0,
        73,225,1,0,0,0,75,231,1,0,0,0,77,245,1,0,0,0,79,247,1,0,0,0,81,82,
        5,91,0,0,82,2,1,0,0,0,83,84,5,93,0,0,84,4,1,0,0,0,85,86,5,98,0,0,
        86,87,5,111,0,0,87,88,5,111,0,0,88,89,5,108,0,0,89,6,1,0,0,0,90,
        91,5,115,0,0,91,92,5,116,0,0,92,93,5,114,0,0,93,94,5,105,0,0,94,
        95,5,110,0,0,95,96,5,103,0,0,96,8,1,0,0,0,97,98,5,110,0,0,98,99,
        5,117,0,0,99,100,5,109,0,0,100,10,1,0,0,0,101,102,5,116,0,0,102,
        103,5,114,0,0,103,104,5,117,0,0,104,105,5,101,0,0,105,12,1,0,0,0,
        106,107,5,102,0,0,107,108,5,97,0,0,108,109,5,108,0,0,109,110,5,115,
        0,0,110,111,5,101,0,0,111,14,1,0,0,0,112,113,5,105,0,0,113,114,5,
        102,0,0,114,16,1,0,0,0,115,116,5,101,0,0,116,117,5,108,0,0,117,118,
        5,115,0,0,118,119,5,101,0,0,119,18,1,0,0,0,120,121,5,119,0,0,121,
        122,5,104,0,0,122,123,5,105,0,0,123,124,5,108,0,0,124,125,5,101,
        0,0,125,20,1,0,0,0,126,127,5,97,0,0,127,128,5,110,0,0,128,129,5,
        100,0,0,129,22,1,0,0,0,130,131,5,111,0,0,131,132,5,114,0,0,132,24,
        1,0,0,0,133,136,3,79,39,0,134,136,5,95,0,0,135,133,1,0,0,0,135,134,
        1,0,0,0,136,142,1,0,0,0,137,141,3,79,39,0,138,141,3,77,38,0,139,
        141,5,95,0,0,140,137,1,0,0,0,140,138,1,0,0,0,140,139,1,0,0,0,141,
        144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,26,1,0,0,0,144,142,
        1,0,0,0,145,146,5,91,0,0,146,147,5,93,0,0,147,28,1,0,0,0,148,149,
        5,40,0,0,149,30,1,0,0,0,150,151,5,41,0,0,151,32,1,0,0,0,152,153,
        5,123,0,0,153,34,1,0,0,0,154,155,5,125,0,0,155,36,1,0,0,0,156,157,
        5,114,0,0,157,158,5,101,0,0,158,159,5,116,0,0,159,160,5,117,0,0,
        160,161,5,114,0,0,161,162,5,110,0,0,162,38,1,0,0,0,163,164,5,58,
        0,0,164,165,5,61,0,0,165,40,1,0,0,0,166,168,5,45,0,0,167,166,1,0,
        0,0,167,168,1,0,0,0,168,170,1,0,0,0,169,171,3,77,38,0,170,169,1,
        0,0,0,171,172,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,42,1,0,
        0,0,174,179,5,34,0,0,175,178,3,45,22,0,176,178,8,0,0,0,177,175,1,
        0,0,0,177,176,1,0,0,0,178,181,1,0,0,0,179,180,1,0,0,0,179,177,1,
        0,0,0,180,182,1,0,0,0,181,179,1,0,0,0,182,183,5,34,0,0,183,44,1,
        0,0,0,184,185,5,92,0,0,185,193,5,34,0,0,186,187,5,92,0,0,187,193,
        5,92,0,0,188,189,5,92,0,0,189,193,5,110,0,0,190,191,5,92,0,0,191,
        193,5,114,0,0,192,184,1,0,0,0,192,186,1,0,0,0,192,188,1,0,0,0,192,
        190,1,0,0,0,193,46,1,0,0,0,194,195,5,33,0,0,195,48,1,0,0,0,196,197,
        5,61,0,0,197,198,5,61,0,0,198,50,1,0,0,0,199,200,5,60,0,0,200,201,
        5,61,0,0,201,52,1,0,0,0,202,203,5,62,0,0,203,204,5,61,0,0,204,54,
        1,0,0,0,205,206,5,60,0,0,206,56,1,0,0,0,207,208,5,62,0,0,208,58,
        1,0,0,0,209,210,5,33,0,0,210,211,5,61,0,0,211,60,1,0,0,0,212,213,
        5,43,0,0,213,62,1,0,0,0,214,215,5,45,0,0,215,64,1,0,0,0,216,217,
        5,42,0,0,217,66,1,0,0,0,218,219,5,47,0,0,219,68,1,0,0,0,220,221,
        5,37,0,0,221,70,1,0,0,0,222,223,5,44,0,0,223,72,1,0,0,0,224,226,
        7,1,0,0,225,224,1,0,0,0,226,227,1,0,0,0,227,225,1,0,0,0,227,228,
        1,0,0,0,228,229,1,0,0,0,229,230,6,36,0,0,230,74,1,0,0,0,231,232,
        5,47,0,0,232,233,5,42,0,0,233,237,1,0,0,0,234,236,9,0,0,0,235,234,
        1,0,0,0,236,239,1,0,0,0,237,238,1,0,0,0,237,235,1,0,0,0,238,240,
        1,0,0,0,239,237,1,0,0,0,240,241,5,42,0,0,241,242,5,47,0,0,242,243,
        1,0,0,0,243,244,6,37,0,0,244,76,1,0,0,0,245,246,7,2,0,0,246,78,1,
        0,0,0,247,248,7,3,0,0,248,80,1,0,0,0,11,0,135,140,142,167,172,177,
        179,192,227,237,1,6,0,0
    ]

class AlgoPractiseLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    BOOL_TYPE = 3
    STR_TYPE = 4
    NUM_TYPE = 5
    TRUE = 6
    FALSE = 7
    IF = 8
    ELSE = 9
    WHILE = 10
    AND = 11
    OR = 12
    ID = 13
    LIST_DCL = 14
    L_PAR = 15
    R_PAR = 16
    L_CURLY = 17
    R_CURLY = 18
    RETURN = 19
    ASSIGN = 20
    NUMVAL = 21
    STRINGVAL = 22
    ESC = 23
    NEG = 24
    EQUAL = 25
    LTE = 26
    GTE = 27
    LT = 28
    GT = 29
    NE = 30
    PLUS = 31
    MINUS = 32
    MULT = 33
    DIV = 34
    MOD = 35
    COMMA = 36
    WS = 37
    COMMENT = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'['", "']'", "'bool'", "'string'", "'num'", "'true'", "'false'", 
            "'if'", "'else'", "'while'", "'and'", "'or'", "'[]'", "'('", 
            "')'", "'{'", "'}'", "'return'", "':='", "'!'", "'=='", "'<='", 
            "'>='", "'<'", "'>'", "'!='", "'+'", "'-'", "'*'", "'/'", "'%'", 
            "','" ]

    symbolicNames = [ "<INVALID>",
            "BOOL_TYPE", "STR_TYPE", "NUM_TYPE", "TRUE", "FALSE", "IF", 
            "ELSE", "WHILE", "AND", "OR", "ID", "LIST_DCL", "L_PAR", "R_PAR", 
            "L_CURLY", "R_CURLY", "RETURN", "ASSIGN", "NUMVAL", "STRINGVAL", 
            "ESC", "NEG", "EQUAL", "LTE", "GTE", "LT", "GT", "NE", "PLUS", 
            "MINUS", "MULT", "DIV", "MOD", "COMMA", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "BOOL_TYPE", "STR_TYPE", "NUM_TYPE", "TRUE", 
                  "FALSE", "IF", "ELSE", "WHILE", "AND", "OR", "ID", "LIST_DCL", 
                  "L_PAR", "R_PAR", "L_CURLY", "R_CURLY", "RETURN", "ASSIGN", 
                  "NUMVAL", "STRINGVAL", "ESC", "NEG", "EQUAL", "LTE", "GTE", 
                  "LT", "GT", "NE", "PLUS", "MINUS", "MULT", "DIV", "MOD", 
                  "COMMA", "WS", "COMMENT", "DIGIT", "LETTER" ]

    grammarFileName = "AlgoPractise.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


