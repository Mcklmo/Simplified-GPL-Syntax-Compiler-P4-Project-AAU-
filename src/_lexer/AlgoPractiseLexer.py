# Generated from src\AlgoPractise.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,253,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
        3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,
        6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,3,11,137,8,11,1,11,1,
        11,1,11,5,11,142,8,11,10,11,12,11,145,9,11,1,12,1,12,1,13,1,13,1,
        14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,3,19,163,
        8,19,1,19,4,19,166,8,19,11,19,12,19,167,1,19,1,19,4,19,172,8,19,
        11,19,12,19,173,3,19,176,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,3,20,188,8,20,5,20,190,8,20,10,20,12,20,193,9,20,
        1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,
        1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,
        1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,4,35,230,8,35,11,35,
        12,35,231,1,35,1,35,1,36,1,36,1,36,1,36,5,36,240,8,36,10,36,12,36,
        243,9,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,241,0,39,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,0,77,0,1,0,5,4,0,10,10,13,13,34,34,92,92,1,0,10,10,
        3,0,9,9,13,13,32,32,1,0,48,57,2,0,65,90,97,122,265,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
        1,0,0,0,1,79,1,0,0,0,3,84,1,0,0,0,5,91,1,0,0,0,7,95,1,0,0,0,9,100,
        1,0,0,0,11,106,1,0,0,0,13,109,1,0,0,0,15,114,1,0,0,0,17,120,1,0,
        0,0,19,124,1,0,0,0,21,127,1,0,0,0,23,136,1,0,0,0,25,146,1,0,0,0,
        27,148,1,0,0,0,29,150,1,0,0,0,31,152,1,0,0,0,33,154,1,0,0,0,35,156,
        1,0,0,0,37,158,1,0,0,0,39,162,1,0,0,0,41,177,1,0,0,0,43,196,1,0,
        0,0,45,198,1,0,0,0,47,201,1,0,0,0,49,204,1,0,0,0,51,207,1,0,0,0,
        53,209,1,0,0,0,55,211,1,0,0,0,57,214,1,0,0,0,59,216,1,0,0,0,61,218,
        1,0,0,0,63,220,1,0,0,0,65,222,1,0,0,0,67,224,1,0,0,0,69,226,1,0,
        0,0,71,229,1,0,0,0,73,235,1,0,0,0,75,249,1,0,0,0,77,251,1,0,0,0,
        79,80,5,98,0,0,80,81,5,111,0,0,81,82,5,111,0,0,82,83,5,108,0,0,83,
        2,1,0,0,0,84,85,5,115,0,0,85,86,5,116,0,0,86,87,5,114,0,0,87,88,
        5,105,0,0,88,89,5,110,0,0,89,90,5,103,0,0,90,4,1,0,0,0,91,92,5,110,
        0,0,92,93,5,117,0,0,93,94,5,109,0,0,94,6,1,0,0,0,95,96,5,116,0,0,
        96,97,5,114,0,0,97,98,5,117,0,0,98,99,5,101,0,0,99,8,1,0,0,0,100,
        101,5,102,0,0,101,102,5,97,0,0,102,103,5,108,0,0,103,104,5,115,0,
        0,104,105,5,101,0,0,105,10,1,0,0,0,106,107,5,105,0,0,107,108,5,102,
        0,0,108,12,1,0,0,0,109,110,5,101,0,0,110,111,5,108,0,0,111,112,5,
        115,0,0,112,113,5,101,0,0,113,14,1,0,0,0,114,115,5,119,0,0,115,116,
        5,104,0,0,116,117,5,105,0,0,117,118,5,108,0,0,118,119,5,101,0,0,
        119,16,1,0,0,0,120,121,5,97,0,0,121,122,5,110,0,0,122,123,5,100,
        0,0,123,18,1,0,0,0,124,125,5,111,0,0,125,126,5,114,0,0,126,20,1,
        0,0,0,127,128,5,114,0,0,128,129,5,101,0,0,129,130,5,116,0,0,130,
        131,5,117,0,0,131,132,5,114,0,0,132,133,5,110,0,0,133,22,1,0,0,0,
        134,137,3,77,38,0,135,137,5,95,0,0,136,134,1,0,0,0,136,135,1,0,0,
        0,137,143,1,0,0,0,138,142,3,77,38,0,139,142,3,75,37,0,140,142,5,
        95,0,0,141,138,1,0,0,0,141,139,1,0,0,0,141,140,1,0,0,0,142,145,1,
        0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,24,1,0,0,0,145,143,1,0,
        0,0,146,147,5,91,0,0,147,26,1,0,0,0,148,149,5,93,0,0,149,28,1,0,
        0,0,150,151,5,40,0,0,151,30,1,0,0,0,152,153,5,41,0,0,153,32,1,0,
        0,0,154,155,5,123,0,0,155,34,1,0,0,0,156,157,5,125,0,0,157,36,1,
        0,0,0,158,159,5,58,0,0,159,160,5,61,0,0,160,38,1,0,0,0,161,163,5,
        45,0,0,162,161,1,0,0,0,162,163,1,0,0,0,163,165,1,0,0,0,164,166,3,
        75,37,0,165,164,1,0,0,0,166,167,1,0,0,0,167,165,1,0,0,0,167,168,
        1,0,0,0,168,175,1,0,0,0,169,171,5,46,0,0,170,172,3,75,37,0,171,170,
        1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,176,
        1,0,0,0,175,169,1,0,0,0,175,176,1,0,0,0,176,40,1,0,0,0,177,191,5,
        34,0,0,178,190,8,0,0,0,179,180,5,92,0,0,180,188,5,34,0,0,181,182,
        5,92,0,0,182,188,5,110,0,0,183,184,5,92,0,0,184,188,5,114,0,0,185,
        186,5,92,0,0,186,188,5,92,0,0,187,179,1,0,0,0,187,181,1,0,0,0,187,
        183,1,0,0,0,187,185,1,0,0,0,188,190,1,0,0,0,189,178,1,0,0,0,189,
        187,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,
        194,1,0,0,0,193,191,1,0,0,0,194,195,5,34,0,0,195,42,1,0,0,0,196,
        197,5,33,0,0,197,44,1,0,0,0,198,199,5,61,0,0,199,200,5,61,0,0,200,
        46,1,0,0,0,201,202,5,60,0,0,202,203,5,61,0,0,203,48,1,0,0,0,204,
        205,5,62,0,0,205,206,5,61,0,0,206,50,1,0,0,0,207,208,5,60,0,0,208,
        52,1,0,0,0,209,210,5,62,0,0,210,54,1,0,0,0,211,212,5,33,0,0,212,
        213,5,61,0,0,213,56,1,0,0,0,214,215,5,43,0,0,215,58,1,0,0,0,216,
        217,5,45,0,0,217,60,1,0,0,0,218,219,5,42,0,0,219,62,1,0,0,0,220,
        221,5,47,0,0,221,64,1,0,0,0,222,223,5,37,0,0,223,66,1,0,0,0,224,
        225,5,44,0,0,225,68,1,0,0,0,226,227,7,1,0,0,227,70,1,0,0,0,228,230,
        7,2,0,0,229,228,1,0,0,0,230,231,1,0,0,0,231,229,1,0,0,0,231,232,
        1,0,0,0,232,233,1,0,0,0,233,234,6,35,0,0,234,72,1,0,0,0,235,236,
        5,47,0,0,236,237,5,42,0,0,237,241,1,0,0,0,238,240,9,0,0,0,239,238,
        1,0,0,0,240,243,1,0,0,0,241,242,1,0,0,0,241,239,1,0,0,0,242,244,
        1,0,0,0,243,241,1,0,0,0,244,245,5,42,0,0,245,246,5,47,0,0,246,247,
        1,0,0,0,247,248,6,36,0,0,248,74,1,0,0,0,249,250,7,3,0,0,250,76,1,
        0,0,0,251,252,7,4,0,0,252,78,1,0,0,0,13,0,136,141,143,162,167,173,
        175,187,189,191,231,241,1,6,0,0
    ]

class AlgoPractiseLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    BOOL_TYPE = 1
    STR_TYPE = 2
    NUM_TYPE = 3
    TRUE = 4
    FALSE = 5
    IF = 6
    ELSE = 7
    WHILE = 8
    AND = 9
    OR = 10
    RETURN = 11
    ID = 12
    L_BRACKET = 13
    R_BRACKET = 14
    L_PAR = 15
    R_PAR = 16
    L_CURLY = 17
    R_CURLY = 18
    ASSIGN = 19
    NUMVAL = 20
    STRINGVAL = 21
    NEG = 22
    EQUAL = 23
    LTE = 24
    GTE = 25
    LT = 26
    GT = 27
    NE = 28
    PLUS = 29
    MINUS = 30
    MULT = 31
    DIV = 32
    MOD = 33
    COMMA = 34
    NEWLINE = 35
    WS = 36
    COMMENT = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'bool'", "'string'", "'num'", "'true'", "'false'", "'if'", 
            "'else'", "'while'", "'and'", "'or'", "'return'", "'['", "']'", 
            "'('", "')'", "'{'", "'}'", "':='", "'!'", "'=='", "'<='", "'>='", 
            "'<'", "'>'", "'!='", "'+'", "'-'", "'*'", "'/'", "'%'", "','" ]

    symbolicNames = [ "<INVALID>",
            "BOOL_TYPE", "STR_TYPE", "NUM_TYPE", "TRUE", "FALSE", "IF", 
            "ELSE", "WHILE", "AND", "OR", "RETURN", "ID", "L_BRACKET", "R_BRACKET", 
            "L_PAR", "R_PAR", "L_CURLY", "R_CURLY", "ASSIGN", "NUMVAL", 
            "STRINGVAL", "NEG", "EQUAL", "LTE", "GTE", "LT", "GT", "NE", 
            "PLUS", "MINUS", "MULT", "DIV", "MOD", "COMMA", "NEWLINE", "WS", 
            "COMMENT" ]

    ruleNames = [ "BOOL_TYPE", "STR_TYPE", "NUM_TYPE", "TRUE", "FALSE", 
                  "IF", "ELSE", "WHILE", "AND", "OR", "RETURN", "ID", "L_BRACKET", 
                  "R_BRACKET", "L_PAR", "R_PAR", "L_CURLY", "R_CURLY", "ASSIGN", 
                  "NUMVAL", "STRINGVAL", "NEG", "EQUAL", "LTE", "GTE", "LT", 
                  "GT", "NE", "PLUS", "MINUS", "MULT", "DIV", "MOD", "COMMA", 
                  "NEWLINE", "WS", "COMMENT", "DIGIT", "LETTER" ]

    grammarFileName = "AlgoPractise.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


